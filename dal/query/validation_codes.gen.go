// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mangosteen/dal/model"
)

func newValidationCode(db *gorm.DB, opts ...gen.DOOption) validationCode {
	_validationCode := validationCode{}

	_validationCode.validationCodeDo.UseDB(db, opts...)
	_validationCode.validationCodeDo.UseModel(&model.ValidationCode{})

	tableName := _validationCode.validationCodeDo.TableName()
	_validationCode.ALL = field.NewAsterisk(tableName)
	_validationCode.ID = field.NewInt64(tableName, "id")
	_validationCode.CreatedAt = field.NewTime(tableName, "created_at")
	_validationCode.UpdatedAt = field.NewTime(tableName, "updated_at")
	_validationCode.DeletedAt = field.NewField(tableName, "deleted_at")
	_validationCode.Code = field.NewString(tableName, "code")
	_validationCode.Email = field.NewString(tableName, "email")
	_validationCode.UsedAt = field.NewTime(tableName, "used_at")

	_validationCode.fillFieldMap()

	return _validationCode
}

type validationCode struct {
	validationCodeDo validationCodeDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Code      field.String
	Email     field.String
	UsedAt    field.Time

	fieldMap map[string]field.Expr
}

func (v validationCode) Table(newTableName string) *validationCode {
	v.validationCodeDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v validationCode) As(alias string) *validationCode {
	v.validationCodeDo.DO = *(v.validationCodeDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *validationCode) updateTableName(table string) *validationCode {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.Code = field.NewString(table, "code")
	v.Email = field.NewString(table, "email")
	v.UsedAt = field.NewTime(table, "used_at")

	v.fillFieldMap()

	return v
}

func (v *validationCode) WithContext(ctx context.Context) IValidationCodeDo {
	return v.validationCodeDo.WithContext(ctx)
}

func (v validationCode) TableName() string { return v.validationCodeDo.TableName() }

func (v validationCode) Alias() string { return v.validationCodeDo.Alias() }

func (v validationCode) Columns(cols ...field.Expr) gen.Columns {
	return v.validationCodeDo.Columns(cols...)
}

func (v *validationCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *validationCode) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 7)
	v.fieldMap["id"] = v.ID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["code"] = v.Code
	v.fieldMap["email"] = v.Email
	v.fieldMap["used_at"] = v.UsedAt
}

func (v validationCode) clone(db *gorm.DB) validationCode {
	v.validationCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v validationCode) replaceDB(db *gorm.DB) validationCode {
	v.validationCodeDo.ReplaceDB(db)
	return v
}

type validationCodeDo struct{ gen.DO }

type IValidationCodeDo interface {
	gen.SubQuery
	Debug() IValidationCodeDo
	WithContext(ctx context.Context) IValidationCodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IValidationCodeDo
	WriteDB() IValidationCodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IValidationCodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IValidationCodeDo
	Not(conds ...gen.Condition) IValidationCodeDo
	Or(conds ...gen.Condition) IValidationCodeDo
	Select(conds ...field.Expr) IValidationCodeDo
	Where(conds ...gen.Condition) IValidationCodeDo
	Order(conds ...field.Expr) IValidationCodeDo
	Distinct(cols ...field.Expr) IValidationCodeDo
	Omit(cols ...field.Expr) IValidationCodeDo
	Join(table schema.Tabler, on ...field.Expr) IValidationCodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IValidationCodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IValidationCodeDo
	Group(cols ...field.Expr) IValidationCodeDo
	Having(conds ...gen.Condition) IValidationCodeDo
	Limit(limit int) IValidationCodeDo
	Offset(offset int) IValidationCodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IValidationCodeDo
	Unscoped() IValidationCodeDo
	Create(values ...*model.ValidationCode) error
	CreateInBatches(values []*model.ValidationCode, batchSize int) error
	Save(values ...*model.ValidationCode) error
	First() (*model.ValidationCode, error)
	Take() (*model.ValidationCode, error)
	Last() (*model.ValidationCode, error)
	Find() ([]*model.ValidationCode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ValidationCode, err error)
	FindInBatches(result *[]*model.ValidationCode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ValidationCode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IValidationCodeDo
	Assign(attrs ...field.AssignExpr) IValidationCodeDo
	Joins(fields ...field.RelationField) IValidationCodeDo
	Preload(fields ...field.RelationField) IValidationCodeDo
	FirstOrInit() (*model.ValidationCode, error)
	FirstOrCreate() (*model.ValidationCode, error)
	FindByPage(offset int, limit int) (result []*model.ValidationCode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IValidationCodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v validationCodeDo) Debug() IValidationCodeDo {
	return v.withDO(v.DO.Debug())
}

func (v validationCodeDo) WithContext(ctx context.Context) IValidationCodeDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v validationCodeDo) ReadDB() IValidationCodeDo {
	return v.Clauses(dbresolver.Read)
}

func (v validationCodeDo) WriteDB() IValidationCodeDo {
	return v.Clauses(dbresolver.Write)
}

func (v validationCodeDo) Session(config *gorm.Session) IValidationCodeDo {
	return v.withDO(v.DO.Session(config))
}

func (v validationCodeDo) Clauses(conds ...clause.Expression) IValidationCodeDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v validationCodeDo) Returning(value interface{}, columns ...string) IValidationCodeDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v validationCodeDo) Not(conds ...gen.Condition) IValidationCodeDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v validationCodeDo) Or(conds ...gen.Condition) IValidationCodeDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v validationCodeDo) Select(conds ...field.Expr) IValidationCodeDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v validationCodeDo) Where(conds ...gen.Condition) IValidationCodeDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v validationCodeDo) Order(conds ...field.Expr) IValidationCodeDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v validationCodeDo) Distinct(cols ...field.Expr) IValidationCodeDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v validationCodeDo) Omit(cols ...field.Expr) IValidationCodeDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v validationCodeDo) Join(table schema.Tabler, on ...field.Expr) IValidationCodeDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v validationCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IValidationCodeDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v validationCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IValidationCodeDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v validationCodeDo) Group(cols ...field.Expr) IValidationCodeDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v validationCodeDo) Having(conds ...gen.Condition) IValidationCodeDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v validationCodeDo) Limit(limit int) IValidationCodeDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v validationCodeDo) Offset(offset int) IValidationCodeDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v validationCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IValidationCodeDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v validationCodeDo) Unscoped() IValidationCodeDo {
	return v.withDO(v.DO.Unscoped())
}

func (v validationCodeDo) Create(values ...*model.ValidationCode) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v validationCodeDo) CreateInBatches(values []*model.ValidationCode, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v validationCodeDo) Save(values ...*model.ValidationCode) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v validationCodeDo) First() (*model.ValidationCode, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValidationCode), nil
	}
}

func (v validationCodeDo) Take() (*model.ValidationCode, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValidationCode), nil
	}
}

func (v validationCodeDo) Last() (*model.ValidationCode, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValidationCode), nil
	}
}

func (v validationCodeDo) Find() ([]*model.ValidationCode, error) {
	result, err := v.DO.Find()
	return result.([]*model.ValidationCode), err
}

func (v validationCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ValidationCode, err error) {
	buf := make([]*model.ValidationCode, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v validationCodeDo) FindInBatches(result *[]*model.ValidationCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v validationCodeDo) Attrs(attrs ...field.AssignExpr) IValidationCodeDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v validationCodeDo) Assign(attrs ...field.AssignExpr) IValidationCodeDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v validationCodeDo) Joins(fields ...field.RelationField) IValidationCodeDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v validationCodeDo) Preload(fields ...field.RelationField) IValidationCodeDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v validationCodeDo) FirstOrInit() (*model.ValidationCode, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValidationCode), nil
	}
}

func (v validationCodeDo) FirstOrCreate() (*model.ValidationCode, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValidationCode), nil
	}
}

func (v validationCodeDo) FindByPage(offset int, limit int) (result []*model.ValidationCode, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v validationCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v validationCodeDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v validationCodeDo) Delete(models ...*model.ValidationCode) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *validationCodeDo) withDO(do gen.Dao) *validationCodeDo {
	v.DO = *do.(*gen.DO)
	return v
}
